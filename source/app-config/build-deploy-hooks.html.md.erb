---
title: Build & Deploy Hooks
---

## The Build & Deploy Process
Build and deploy hooks take place at very specific points in both the build and deploy processes. The diagram below shows the process and at which point each hook type runs. Details about each of the hooks are provided below.

*Scroll down to trigger each step of the animation.*

<%= partial "deploy-diagram", locals: {:hooks => 'true'} %>

## Build & Compile Hooks
There are two main phases of the build process to consider when defining build hooks. These two phases are handled by your [engine](/engines/).

1. **Build** - This is the phase where runtime executables and dependencies are downloaded and installed.
2. **Compile** - This is when commands are run to compile your code.

Build and compile hooks are configured in the the `code.build` section of your boxfile.yml.

#### Important Things to Know About Build & Compile Hooks
- [Environment variables](/app-config/environment-variables/) are **not** available during the build.
- Build hooks do not have access to data services.
- Code is fully writable.

### before_build
`before_build` hooks run before runtime executables are downloaded and installed. The most common use for these hooks is to download executables your engine normally doesn't install.

```yaml
code.build:
  before_build:
    - 'echo I\'m getting ready'
    - 'curl -sSf https://static.rust-lang.org/rustup.sh | sh'
```

### after_build
`after_prepare` hooks run after runtime executables are downloaded and installed.

```yaml
code.build:
  after_build:
    - 'echo Good to go!'
```

### before_compile
`before_compile` hooks run after runtime executables are downloaded and installed, but before code is built/compiled.

```yaml
code.build:
  before_compile:
    - 'cargo build --release'
    - 'echo Ready to be built'
```

### after_compile
`after_compile` hooks run after code is built/compiled.

```yaml
code.build:
  after_compile:
    - 'echo Built and ready to go!'
```

## Deploy Hooks
Deploy hooks run as apps are being deployed into sim and production environments.

#### Important Things to Know About Deploy Hooks
- [Environment variables](/app-config/environment-variables/) are available to deploy hooks.
- Deploy hooks have access to running data services.
- Code is writable during [transform hooks](#transform), but read-only once transforms are complete.

### transform
`transform` hooks run on all web and worker nodes just before their filesystems are locked down and made read-only. Any code modification dependent on environment variables must be run as a transform.

```yaml
code.deploy:
  transform:
    - 'if [ "$ENV" = "prod" ]; then mv config-prod.yml config.yml; fi'
```

### before_deploy
`before_deploy` hooks run on a new node before requests are routed to new nodes. These are unique to each component, so Nanobox needs to know on which each will run. In multi-node components, these only run on a single node.

```yaml
code.deploy:
  before_deploy:
    web.site:
      - 'bundle exec rake clear-cache'
      - 'echo I\'am ready to go'
    worker.jobs:
      - 'bundle exec check-queue'
```

### before\_deploy\_all
`before_deploy_all` hooks are the same as `before_deploy` hooks, but they run on all new nodes in a multi-node component. These are useful when you need to modify the contents of [writable directories](/app-config/writable-dirs/).

```yaml
code.deploy:
  before_deploy_all:
    web.site:
      - 'bundle exec prime-local-cache'
      - 'bundle exec register-host'
```

### after_deploy
`after_deploy` hooks run on a new node after requests are routed to new nodes. These are unique to each component, so Nanobox needs to know on which each will run. In multi-node components, these only run on a single node.

```yaml
code.deploy:
  after_deploy:
    web.site:
      - 'bundle exec rake prime-cache'
      - 'echo "I am working"'
    worker.jobs:
      - 'bundle exec start-queue'
```

### after\_deploy\_all
`after_deploy_all` hooks are the same as `after_deploy` hooks, but they run on all new nodes in a multi-node component. These are useful when you need to modify the contents of [writable directories](/app-config/writable-dirs/).

```yaml
code.deploy:
  after_deploy_all:
    web.site:
      - 'bundle exec prime-local-cache'
      - 'bundle exec register-host'
```
